DEBUG: Creating account for xp0nba0@spartaaceap.com...
INFO: loading browser...
DEBUG: waiting for signin
DEBUG: Creating account for xp0nba0@spartaaceap.com...
INFO: loading browser...
DEBUG: Creating account for xp0nba0@spartaaceap.com...
INFO: loading browser...
DEBUG: Creating account for xp0nba0@spartaaceap.com...
INFO: loading browser...
DEBUG: waiting for signin
DEBUG: Creating account for xp0nba0@spartaaceap.com...
INFO: loading browser...
DEBUG: Creating account for xp0nba0@spartaaceap.com...
INFO: loading browser...
DEBUG: waiting for signin
DEBUG: https://myaccount.google.com/?utm_source=sign_in_no_continue
DEBUG: Signed In
Loading browser for user: xp0nba0
DEBUG: Turning on history
DEBUG: Email: None
DEBUG: Taking screenshot
DEBUG: Screenshot saved: C:\Users\hussa\Desktop\algopologist\data\screenshots\yt-recs\xp0nba0\Youtube\create-77305933.png
DEBUG: Signal added: create
DEBUG: Creating account for xp0nba0@spartaaceap.com...
INFO: loading browser...
DEBUG: Creating account for xp0nba0@spartaaceap.com...
INFO: loading browser...
DEBUG: waiting for signin
DEBUG: Signed In
DEBUG: Retrying...
INFO: loading browser...
DEBUG: waiting for signin
DEBUG: Signed In
DEBUG: Retrying...
INFO: loading browser...
DEBUG: waiting for signin
DEBUG: Signed In
DEBUG: Retrying...
INFO: loading browser...
DEBUG: waiting for signin
DEBUG: Signed In
DEBUG: Retrying...
INFO: loading browser...
DEBUG: waiting for signin
DEBUG: Signed In
DEBUG: Retrying...
INFO: loading browser...
DEBUG: waiting for signin
DEBUG: Signed In
DEBUG: Retrying...
INFO: loading browser...
DEBUG: waiting for signin
DEBUG: Signed In
DEBUG: Retrying...
INFO: loading browser...
DEBUG: waiting for signin
DEBUG: Signed In
DEBUG: Retrying...
INFO: loading browser...
DEBUG: waiting for signin
DEBUG: Creating account for xp0nba0@spartaaceap.com...
INFO: loading browser...
DEBUG: Creating account for xp0nba0@spartaaceap.com...
INFO: loading browser...
DEBUG: waiting for signin
DEBUG: Signed In
DEBUG: Retrying...
INFO: loading browser...
DEBUG: waiting for signin
Loading browser for user: xp0nba0
ERROR: Message: unknown error: cannot connect to chrome at 127.0.0.1:33741
from chrome not reachable
Stacktrace:
	GetHandleVerifier [0x00D58D03+51395]
	(No symbol) [0x00CC5F61]
	(No symbol) [0x00B7E004]
	(No symbol) [0x00B71A34]
	(No symbol) [0x00BA940C]
	(No symbol) [0x00BA1F15]
	(No symbol) [0x00BA1D57]
	(No symbol) [0x00BDC655]
	(No symbol) [0x00BDC1FA]
	(No symbol) [0x00BD3C26]
	(No symbol) [0x00BAC629]
	(No symbol) [0x00BAD40D]
	GetHandleVerifier [0x010D68D3+3712147]
	GetHandleVerifier [0x01115CBA+3971194]
	GetHandleVerifier [0x01110FA8+3951464]
	GetHandleVerifier [0x00E09D09+776393]
	(No symbol) [0x00CD1734]
	(No symbol) [0x00CCC618]
	(No symbol) [0x00CCC7C9]
	(No symbol) [0x00CBDDF0]
	BaseThreadInitThunk [0x762E7BA9+25]
	RtlInitializeExceptionChain [0x7757BDAB+107]
	RtlClearBits [0x7757BD2F+191]

ERROR: Could not load browser
DEBUG: Trying again...
Loading browser for user: xp0nba0
Loading browser for user: xp0nba0
DEBUG: Turning on history
DEBUG: Already turned on history
DEBUG: Email: None
DEBUG: Taking screenshot
DEBUG: Screenshot saved: C:\Users\hussa\Desktop\algopologist\data\screenshots\yt-recs\xp0nba0\Youtube\create-5bd5d82a.png
DEBUG: Signal added: create
DEBUG: Turning of history
ERROR: InnerTube error
ERROR: 'videoDetails': SyXfJi2KZ-A&list=RDCLAK5uy_k5n4srrEB1wgvIjPNTXS9G1ufE9WQxhnA
ERROR: InnerTube error
ERROR: 'videoDetails': rDG-6Ue_Qbw&list=RDCLAK5uy_k5n4srrEB1wgvIjPNTXS9G1ufE9WQxhnA
ERROR: InnerTube error
ERROR: 'videoDetails': tJkPh2vluFQ&list=RDCLAK5uy_k5n4srrEB1wgvIjPNTXS9G1ufE9WQxhnA
ERROR: InnerTube error
ERROR: 'videoDetails': CLl9FZ4WizE&list=RDCLAK5uy_k5n4srrEB1wgvIjPNTXS9G1ufE9WQxhnA
ERROR: InnerTube error
ERROR: 'videoDetails': ROhlsgTOsgc&list=RDCLAK5uy_k5n4srrEB1wgvIjPNTXS9G1ufE9WQxhnA
ERROR: InnerTube error
ERROR: 'videoDetails': Izo45cvolkM&list=RDCLAK5uy_k5n4srrEB1wgvIjPNTXS9G1ufE9WQxhnA
ERROR: InnerTube error
ERROR: 'videoDetails': m3tksl4nxPo&list=RDCLAK5uy_k5n4srrEB1wgvIjPNTXS9G1ufE9WQxhnA
ERROR: InnerTube error
ERROR: 'videoDetails': 11rpGprITo0&list=RDCLAK5uy_k5n4srrEB1wgvIjPNTXS9G1ufE9WQxhnA
ERROR: InnerTube error
ERROR: 'videoDetails': a5i-KdUQ47o&list=RDCLAK5uy_k5n4srrEB1wgvIjPNTXS9G1ufE9WQxhnA
ERROR: InnerTube error
ERROR: 'videoDetails': ctb0QmHRpRE&list=RDCLAK5uy_k5n4srrEB1wgvIjPNTXS9G1ufE9WQxhnA
ERROR: InnerTube error
ERROR: 'videoDetails': XKR3SfC6DdQ&list=RDCLAK5uy_k5n4srrEB1wgvIjPNTXS9G1ufE9WQxhnA
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 2590685161.py • <module> • 8 • user.chromeSignIn() ► User.py • chromeSignIn • 94 • debug(f'SIGNING IN: {self.chromeId}') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: SIGNING IN: inner1 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 2590685161.py • <module> • 8 • user.chromeSignIn() ► User.py • chromeSignIn • 96 • self.platform.loadBrowser() ► Platform.py • loadBrowser • 29 • log(f'Loading browser for user: {self.userId}') ► log.py • log • 43 • caller = inspect.stack() ►  => Loading browser for user: inner1 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 2590685161.py • <module> • 8 • user.chromeSignIn() ► User.py • chromeSignIn • 96 • self.platform.loadBrowser() ► Platform.py • loadBrowser • 40 • error(e) ► log.py • error • 12 • log(f"ERROR: {e}", p=False, caller=inspect.stack()) ►  => ERROR: Browser type must be specified 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 2590685161.py • <module> • 8 • user.chromeSignIn() ► User.py • chromeSignIn • 96 • self.platform.loadBrowser() ► Platform.py • loadBrowser • 41 • error('Could not load browser') ► log.py • error • 12 • log(f"ERROR: {e}", p=False, caller=inspect.stack()) ►  => ERROR: Could not load browser 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 2590685161.py • <module> • 8 • user.chromeSignIn() ► User.py • chromeSignIn • 96 • self.platform.loadBrowser() ► Platform.py • loadBrowser • 42 • debug('Trying again...') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Trying again... 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 2590685161.py • <module> • 8 • user.chromeSignIn() ► User.py • chromeSignIn • 94 • debug(f'SIGNING IN: {self.chromeId}') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: SIGNING IN: inner1 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 2590685161.py • <module> • 8 • user.chromeSignIn() ► User.py • chromeSignIn • 96 • self.platform.loadBrowser() ► Platform.py • loadBrowser • 29 • log(f'Loading browser for user: {self.userId}') ► log.py • log • 43 • caller = inspect.stack() ►  => Loading browser for user: inner1 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 3125739207.py • <module> • 8 • user.chromeSignIn() ► User.py • chromeSignIn • 94 • debug(f'SIGNING IN: {self.chromeId}') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: SIGNING IN: inner1 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 3125739207.py • <module> • 8 • user.chromeSignIn() ► User.py • chromeSignIn • 96 • self.platform.loadBrowser() ► Platform.py • loadBrowser • 29 • log(f'Loading browser for user: {self.userId}') ► log.py • log • 43 • caller = inspect.stack() ►  => Loading browser for user: inner1 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 3125739207.py • <module> • 8 • user.chromeSignIn() ► User.py • chromeSignIn • 94 • debug(f'SIGNING IN: {self.chromeId}') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: SIGNING IN: inner1 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 3125739207.py • <module> • 8 • user.chromeSignIn() ► User.py • chromeSignIn • 96 • self.platform.loadBrowser() ► Platform.py • loadBrowser • 29 • log(f'Loading browser for user: {self.userId}') ► log.py • log • 43 • caller = inspect.stack() ►  => Loading browser for user: inner1 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 3881652026.py • <module> • 1 • user.recordHome() ► User.py • recordHome • 198 • self.takeScreenshot(image_path) ► User.py • takeScreenshot • 217 • self.platform.screenshot(file) ► Platform.py • screenshot • 134 • return True ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Taking screenshot 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 3881652026.py • <module> • 1 • user.recordHome() ► User.py • recordHome • 198 • self.takeScreenshot(image_path) ► User.py • takeScreenshot • 217 • self.platform.screenshot(file) ► Platform.py • screenshot • 136 • def fullScreenshot(self, file): ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Screenshot saved: /Users/hussam/Desktop/Projects/algopologist/data/screenshots/local/inner1/reddit/observe/a90.png 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 3125739207.py • <module> • 8 • user.chromeSignIn() ► User.py • chromeSignIn • 94 • debug(f'SIGNING IN: {self.chromeId}') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: SIGNING IN: inner1 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 3125739207.py • <module> • 8 • user.chromeSignIn() ► User.py • chromeSignIn • 96 • self.platform.loadBrowser() ► Platform.py • loadBrowser • 29 • log(f'Loading browser for user: {self.userId}') ► log.py • log • 43 • caller = inspect.stack() ►  => Loading browser for user: inner1 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 3881652026.py • <module> • 1 • user.recordHome() ► User.py • recordHome • 199 • image_path = self.takeScreenshot() ► User.py • takeScreenshot • 225 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 131 • debug("Taking screenshot") ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Taking screenshot 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 3881652026.py • <module> • 1 • user.recordHome() ► User.py • recordHome • 199 • image_path = self.takeScreenshot() ► User.py • takeScreenshot • 225 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 133 • debug(f'Screenshot saved: {file}') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Screenshot saved: /Users/hussam/Desktop/Projects/algopologist/data/screenshots/local/inner1/reddit/recordHome/f861.png 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1940616746.py • <module> • 1 • user.followUser('nba') ► User.py • followUser • 115 • self.search(topic) ► User.py • search • 211 • self.takeScreenshot() ► User.py • takeScreenshot • 225 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 131 • debug("Taking screenshot") ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Taking screenshot 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1940616746.py • <module> • 1 • user.followUser('nba') ► User.py • followUser • 115 • self.search(topic) ► User.py • search • 211 • self.takeScreenshot() ► User.py • takeScreenshot • 225 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 133 • debug(f'Screenshot saved: {file}') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Screenshot saved: /Users/hussam/Desktop/Projects/algopologist/data/screenshots/local/inner1/reddit/search/06fa.png 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1940616746.py • <module> • 1 • user.followUser('nba') ► User.py • followUser • 115 • self.search(topic) ► User.py • search • 212 • self.takeScreenshot() ► User.py • takeScreenshot • 225 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 131 • debug("Taking screenshot") ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Taking screenshot 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1940616746.py • <module> • 1 • user.followUser('nba') ► User.py • followUser • 115 • self.search(topic) ► User.py • search • 212 • self.takeScreenshot() ► User.py • takeScreenshot • 225 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 133 • debug(f'Screenshot saved: {file}') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Screenshot saved: /Users/hussam/Desktop/Projects/algopologist/data/screenshots/local/inner1/reddit/search/e9f1.png 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1940616746.py • <module> • 1 • user.followUser('nba') ► User.py • followUser • 115 • self.search(topic) ► User.py • search • 213 • self.addSignal('search', None, '', info=f'searched-{key}') ► User.py • addSignal • 83 • debug('Signal added: %s' % action) ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Signal added: search 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1940616746.py • <module> • 1 • user.followUser('nba') ► User.py • followUser • 116 • debug('Term searched') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Term searched 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1940616746.py • <module> • 1 • user.followUser('nba') ► User.py • followUser • 117 • user = self.platform.followUser() ► Reddit.py • followUser • 340 • user = self._joinNthUser(0) ► Reddit.py • _joinNthUser • 319 • debug(user) ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: https://www.reddit.com/user/nba/ 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1940616746.py • <module> • 1 • user.followUser('nba') ► User.py • followUser • 118 • self.takeScreenshot() ► User.py • takeScreenshot • 225 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 131 • debug("Taking screenshot") ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Taking screenshot 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1940616746.py • <module> • 1 • user.followUser('nba') ► User.py • followUser • 118 • self.takeScreenshot() ► User.py • takeScreenshot • 225 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 133 • debug(f'Screenshot saved: {file}') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Screenshot saved: /Users/hussam/Desktop/Projects/algopologist/data/screenshots/local/inner1/reddit/followUser/3c43.png 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1940616746.py • <module> • 1 • user.followUser('nba') ► User.py • followUser • 119 • self.addSignal('follow', user, 'source', info=f'searched-{topic}') ► User.py • addSignal • 64 • error(f'Error adding object: {e}') ► log.py • error • 12 • log(f"ERROR: {e}", p=False, caller=inspect.stack()) ►  => ERROR: Error adding object: 'NoneType' object has no attribute 'replace' 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1940616746.py • <module> • 1 • user.followUser('nba') ► User.py • followUser • 119 • self.addSignal('follow', user, 'source', info=f'searched-{topic}') ► User.py • addSignal • 83 • debug('Signal added: %s' % action) ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Signal added: follow 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 103786054.py • <module> • 1 • user.joinCommunity('nba') ► User.py • joinCommunity • 171 • self.search(topic) ► User.py • search • 211 • wait(4) ► User.py • takeScreenshot • 225 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 131 • debug("Taking screenshot") ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Taking screenshot 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 103786054.py • <module> • 1 • user.joinCommunity('nba') ► User.py • joinCommunity • 171 • self.search(topic) ► User.py • search • 211 • wait(4) ► User.py • takeScreenshot • 225 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 133 • debug(f'Screenshot saved: {file}') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Screenshot saved: /Users/hussam/Desktop/Projects/algopologist/data/screenshots/local/inner1/reddit/search/060d.png 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 103786054.py • <module> • 1 • user.joinCommunity('nba') ► User.py • joinCommunity • 171 • self.search(topic) ► User.py • search • 212 • self.takeScreenshot() ► User.py • takeScreenshot • 225 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 131 • debug("Taking screenshot") ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Taking screenshot 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 103786054.py • <module> • 1 • user.joinCommunity('nba') ► User.py • joinCommunity • 171 • self.search(topic) ► User.py • search • 212 • self.takeScreenshot() ► User.py • takeScreenshot • 225 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 133 • debug(f'Screenshot saved: {file}') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Screenshot saved: /Users/hussam/Desktop/Projects/algopologist/data/screenshots/local/inner1/reddit/search/f76a.png 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 103786054.py • <module> • 1 • user.joinCommunity('nba') ► User.py • joinCommunity • 171 • self.search(topic) ► User.py • search • 213 • self.addSignal('search', None, '', info=f'searched-{key}') ► User.py • addSignal • 83 • debug('Signal added: %s' % action) ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Signal added: search 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 103786054.py • <module> • 1 • user.joinCommunity('nba') ► User.py • joinCommunity • 172 • debug('Term searched') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Term searched 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 103786054.py • <module> • 1 • user.joinCommunity('nba') ► User.py • joinCommunity • 173 • community = self.platform.joinCommunity() ► Reddit.py • joinCommunity • 349 • community = self._joinNthSubreddit(0) ► Reddit.py • _joinNthSubreddit • 299 • debug(community) ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: nba 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 103786054.py • <module> • 1 • user.joinCommunity('nba') ► User.py • joinCommunity • 174 • self.takeScreenshot() ► User.py • takeScreenshot • 225 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 131 • debug("Taking screenshot") ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Taking screenshot 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 103786054.py • <module> • 1 • user.joinCommunity('nba') ► User.py • joinCommunity • 174 • self.takeScreenshot() ► User.py • takeScreenshot • 225 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 133 • debug(f'Screenshot saved: {file}') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Screenshot saved: /Users/hussam/Desktop/Projects/algopologist/data/screenshots/local/inner1/reddit/joinCommunity/27b4.png 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 103786054.py • <module> • 1 • user.joinCommunity('nba') ► User.py • joinCommunity • 175 • self.addSignal('join', community, 'source', info=f'searched-{topic}') ► User.py • addSignal • 64 • error(f'Error adding object: {e}') ► log.py • error • 12 • log(f"ERROR: {e}", p=False, caller=inspect.stack()) ►  => ERROR: Error adding object: 'NoneType' object has no attribute 'replace' 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 103786054.py • <module> • 1 • user.joinCommunity('nba') ► User.py • joinCommunity • 175 • self.addSignal('join', community, 'source', info=f'searched-{topic}') ► User.py • addSignal • 83 • debug('Signal added: %s' % action) ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Signal added: join 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1158425897.py • <module> • 1 • user.openPost('nba') ► User.py • openPost • 133 • info(f"Opeining post for {topic}") ► log.py • info • 19 • log(f"INFO: {e}", p=False, caller=inspect.stack()) ►  => INFO: Opeining post for nba 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1158425897.py • <module> • 1 • user.openPost('nba') ► User.py • openPost • 135 • self.search(topic) ► User.py • search • 211 • wait(4) ► User.py • takeScreenshot • 225 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 131 • debug("Taking screenshot") ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Taking screenshot 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1158425897.py • <module> • 1 • user.openPost('nba') ► User.py • openPost • 135 • self.search(topic) ► User.py • search • 211 • wait(4) ► User.py • takeScreenshot • 225 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 133 • debug(f'Screenshot saved: {file}') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Screenshot saved: /Users/hussam/Desktop/Projects/algopologist/data/screenshots/local/inner1/reddit/search/6673.png 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1158425897.py • <module> • 1 • user.openPost('nba') ► User.py • openPost • 135 • self.search(topic) ► User.py • search • 212 • self.takeScreenshot() ► User.py • takeScreenshot • 225 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 131 • debug("Taking screenshot") ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Taking screenshot 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1158425897.py • <module> • 1 • user.openPost('nba') ► User.py • openPost • 135 • self.search(topic) ► User.py • search • 212 • self.takeScreenshot() ► User.py • takeScreenshot • 225 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 133 • debug(f'Screenshot saved: {file}') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Screenshot saved: /Users/hussam/Desktop/Projects/algopologist/data/screenshots/local/inner1/reddit/search/3d03.png 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1158425897.py • <module> • 1 • user.openPost('nba') ► User.py • openPost • 135 • self.search(topic) ► User.py • search • 213 • self.addSignal('search', None, '', info=f'searched-{key}') ► User.py • addSignal • 83 • debug('Signal added: %s' % action) ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Signal added: search 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1158425897.py • <module> • 1 • user.openPost('nba') ► User.py • openPost • 137 • post, opened = self.platform.openPost(already_opened=opened_posts) ► Reddit.py • openPost • 409 • debug("Posts: " + str(len(posts))) ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Posts: 21 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 3125739207.py • <module> • 8 • user.chromeSignIn() ► User.py • chromeSignIn • 124 • debug(f'SIGNING IN: {self.chromeId}') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: SIGNING IN: inner1 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 3125739207.py • <module> • 8 • user.chromeSignIn() ► User.py • chromeSignIn • 126 • self.platform.loadBrowser() ► Platform.py • loadBrowser • 29 • log(f'Loading browser for user: {self.userId}') ► log.py • log • 43 • caller = inspect.stack() ►  => Loading browser for user: inner1 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 2546591670.py • <module> • 1 • signal = user.followUser('Manunited') ► User.py • followUser • 144 • self.search(topic) ► User.py • search • 238 • self.takeScreenshot() ► User.py • takeScreenshot • 259 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 131 • debug("Taking screenshot") ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Taking screenshot 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 2546591670.py • <module> • 1 • signal = user.followUser('Manunited') ► User.py • followUser • 144 • self.search(topic) ► User.py • search • 238 • self.takeScreenshot() ► User.py • takeScreenshot • 259 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 133 • debug(f'Screenshot saved: {file}') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Screenshot saved: /Users/hussam/Desktop/Projects/algopologist/data/screenshots/local/inner1/reddit/search/95d5.png 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 2546591670.py • <module> • 1 • signal = user.followUser('Manunited') ► User.py • followUser • 145 • debug('Term searched') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Term searched 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 2546591670.py • <module> • 1 • signal = user.followUser('Manunited') ► User.py • followUser • 146 • user = self.platform.followUser() ► Reddit.py • followUser • 340 • user = self._joinNthUser(0) ► Reddit.py • _joinNthUser • 319 • debug(user) ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: https://www.reddit.com/user/manunited2099/ 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 2546591670.py • <module> • 1 • signal = user.followUser('Manunited') ► User.py • followUser • 147 • self.takeScreenshot() ► User.py • takeScreenshot • 259 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 131 • debug("Taking screenshot") ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Taking screenshot 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 2546591670.py • <module> • 1 • signal = user.followUser('Manunited') ► User.py • followUser • 147 • self.takeScreenshot() ► User.py • takeScreenshot • 259 • self.platform.screenshot(image_path) ► Platform.py • screenshot • 133 • debug(f'Screenshot saved: {file}') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Screenshot saved: /Users/hussam/Desktop/Projects/algopologist/data/screenshots/local/inner1/reddit/followUser/8044.png 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 2546591670.py • <module> • 1 • signal = user.followUser('Manunited') ► User.py • followUser • 148 • signal = self.addSignal('follow', user, 'source', info=f'searched-{topic}') ► User.py • addSignal • 69 • error(f'Error adding object: {e}') ► log.py • error • 12 • log(f"ERROR: {e}", p=False, caller=inspect.stack()) ►  => ERROR: Error adding object: 'NoneType' object has no attribute 'replace' 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1576529192.py • <module> • 1 • user.likePost('manunited') ► User.py • likePost • 176 • self.goHome() ► User.py • search • 238 • self.platform.searchTerm(key) ► User.py • takeScreenshot • 259 • if not os.path.exists(os.path.dirname(image_path)): ► Platform.py • screenshot • 131 • debug("Taking screenshot") ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Taking screenshot 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1576529192.py • <module> • 1 • user.likePost('manunited') ► User.py • likePost • 176 • self.goHome() ► User.py • search • 238 • self.platform.searchTerm(key) ► User.py • takeScreenshot • 259 • if not os.path.exists(os.path.dirname(image_path)): ► Platform.py • screenshot • 133 • debug(f'Screenshot saved: {file}') ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: Screenshot saved: /Users/hussam/Desktop/Projects/algopologist/data/screenshots/local/inner1/reddit/search/665a.png 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1576529192.py • <module> • 1 • user.likePost('manunited') ► User.py • likePost • 177 • wait(2) ► log.py • info • 19 • log(f"INFO: {e}", p=False, caller=inspect.stack()) ►  => INFO: Term searched: manunited 
runpy.py • _run_module_as_main • 196 • return _run_code(code, main_globals, None, ► runpy.py • _run_code • 86 • exec(code, run_globals) ► ipykernel_launcher.py • <module> • 17 • app.launch_new_instance() ► application.py • launch_instance • 978 • app.start() ► kernelapp.py • start • 712 • self.io_loop.start() ► asyncio.py • start • 215 • self.asyncio_loop.run_forever() ► base_events.py • run_forever • 600 • self._run_once() ► base_events.py • _run_once • 1896 • handle._run() ► events.py • _run • 80 • self._context.run(self._callback, *self._args) ► kernelbase.py • dispatch_queue • 510 • await self.process_one() ► kernelbase.py • process_one • 499 • await dispatch(*args) ► kernelbase.py • dispatch_shell • 406 • await result ► kernelbase.py • execute_request • 730 • reply_content = await reply_content ► ipkernel.py • do_execute • 383 • res = shell.run_cell( ► zmqshell.py • run_cell • 528 • return super().run_cell(*args, **kwargs) ► interactiveshell.py • run_cell • 3009 • result = self._run_cell( ► interactiveshell.py • _run_cell • 3064 • result = runner(coro) ► async_helpers.py • _pseudo_sync_runner • 129 • coro.send(None) ► interactiveshell.py • run_cell_async • 3269 • has_raised = await self.run_ast_nodes(code_ast.body, cell_name, ► interactiveshell.py • run_ast_nodes • 3448 • if await self.run_code(code, result, async_=asy): ► interactiveshell.py • run_code • 3508 • exec(code_obj, self.user_global_ns, self.user_ns) ► 1576529192.py • <module> • 1 • user.likePost('manunited') ► User.py • likePost • 178 • self.search(topic) ► Reddit.py • likePost • 470 • debug(f"liked post {post['id']}") ► log.py • debug • 26 • log(f"DEBUG: {e}", p=False, caller=inspect.stack()) ►  => DEBUG: liked post t3_18tz6jl 
